library(gapminder)
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
version
library(dplyr)
library(gapminder)
library(dplyr)
library(ggplot2)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
gapminder
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent)
geom_point()
scale_x_log10("pop")
scale_y_log10("gdpPercap")
library(ggplot2)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent)) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent, size = pop)) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages(boot)
install.packages("boot")
update.packages(ask = FALSE)
install.packages("boot")
library(caret
)
library(data.table)
library(boot)
.libpaths()
libpaths()
.libpaths()
library(dplyr)
update.packages(ask = FALSE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
library(tidyverse)
library(caret)
?paralell
?parallel
?registerDoParallel
?preProcess
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("pandoc")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("Rtools")
update()
updateR()
library(installr)
updateR()
library("tidyverse")
library("caret")
library("caretEnsemble")
library("kernlab")
library("Matrix")
library("skimr")
library("recipes")
library("xgboost")
setwd("C:/Users/Utilizador/Desktop/kaggle/House_Prices-Advanced_Regression_Techniques")
set.seed(4561)
# Load data
db1 <- read.csv('train.csv')
db2 <- read.csv('test.csv')
db2$SalePrice <- as.integer(NA)
hp <- rbind(db1, db2)
remove(db1); remove(db2)
# Overview of the Data
skim(hp)
hp <- hp %>%
mutate(MSSubClass = factor(MSSubClass))
# Fix variable name starts with number
names(hp)[44:45] <- c("FirstFLSF","SecFLSF")
names(hp)[70] <- c("ThreeSnPorch")
# Fix typos in factorial levels
library(forcats)
count(hp, RoofMatl)
hp <- hp %>%
mutate(RoofMatl = fct_collapse(RoofMatl, "TarGrv" = "Tar&Grv"))
count(hp, Exterior1st)
hp <- hp %>%
mutate(Exterior1st = fct_collapse(Exterior1st, "WdSdng" = "Wd Sdng"))
count(hp, Exterior2nd)
hp <- hp %>%
mutate(Exterior2nd = fct_collapse(Exterior2nd, "BrkComm" = "Brk Cmn", "WdSdng" = "Wd Sdng", "WdShng" = "Wd Shng"))
summary(hp$GarageYrBlt)
hp <- hp %>%
mutate(GarageYrBlt = ifelse(GarageYrBlt > 2010, 2007, GarageYrBlt))
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
hp %>%
ggplot(aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
attach(hp)
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
hp[GrLivArea>4500,]
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
library("tidyverse")
library("caret")
library("caretEnsemble")
library("kernlab")
library("Matrix")
library("skimr")
library("recipes")
library("xgboost")
setwd("C:/Users/Utilizador/Desktop/kaggle/House_Prices-Advanced_Regression_Techniques")
set.seed(4561)
# Load data
db1 <- read.csv('train.csv')
db2 <- read.csv('test.csv')
db2$SalePrice <- as.integer(NA)
hp <- rbind(db1, db2)
remove(db1); remove(db2)
# Overview of the Data
skim(hp)
# Changing MSSubClass to a factor
hp <- hp %>%
mutate(MSSubClass = factor(MSSubClass))
# Fix variable name starts with number
names(hp)[44:45] <- c("FirstFLSF","SecFLSF")
names(hp)[70] <- c("ThreeSnPorch")
# Fix typos in factorial levels
library(forcats)
count(hp, RoofMatl)
hp <- hp %>%
mutate(RoofMatl = fct_collapse(RoofMatl, "TarGrv" = "Tar&Grv"))
count(hp, Exterior1st)
hp <- hp %>%
mutate(Exterior1st = fct_collapse(Exterior1st, "WdSdng" = "Wd Sdng"))
count(hp, Exterior2nd)
hp <- hp %>%
mutate(Exterior2nd = fct_collapse(Exterior2nd, "BrkComm" = "Brk Cmn", "WdSdng" = "Wd Sdng", "WdShng" = "Wd Shng"))
# Fix typo of GarageYrBlt
summary(hp$GarageYrBlt)
hp <- hp %>%
mutate(GarageYrBlt = ifelse(GarageYrBlt > 2010, 2007, GarageYrBlt))
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
hp[GrLivArea>4500,]
[hp$GrLivArea>4500,]
ggplot(hp, aes(x=GrLivArea, y=SalePrice)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_text(data=hp[hp$GrLivArea>4500,], mapping=aes(label=Id), vjust=1.5, col = "blue") +
xlab("above grade living area") +
ylab("sale price")
outlier <- c(463, 524, 633, 1299, 1325, 31, 971)
hp<- hp[!hp$Id %in% outlier, ]
outlier <- c(524, 1299, 463, 633, 1325, 31, 971)
hp<- hp[!hp$Id %in% outlier, ]
count(hp, MSSubClass)
count(hp, OverallQua)
names(hp)
count(hp, OverallQual)
count(hp, OverallCond)
hp <- hp  %>%
mutate(withBsmt = as.numeric(TotalBsmtSF!=0),
with2ndFloor= as.numeric(SecFLSF>0),
withPool = as.numeric(PoolArea!=0),
withPorch = as.numeric((OpenPorchSF+EnclosedPorch+ThreeSnPorch+ScreenPorch)!=0),
hasRemod = as.numeric(YearRemodAdd != YearBuilt),
withFireplace = as.numeric(Fireplaces >0),
isNew = as.numeric(YrSold == YearBuilt),
totalSF = GrLivArea + TotalBsmtSF,
totalBath = FullBath + 0.5*HalfBath + 0.5*BsmtHalfBath + BsmtFullBath,
age = YrSold - YearRemodAdd,
yearsRemodeled = ifelse(YearRemodAdd == YearBuilt, YrSold < YearRemodAdd, 0),
YrSold = factor(YrSold),
MoSold = factor(MoSold),
MSSubClass = factor(MSSubClass),
OverallQual = factor(OverallQual),
OverallCond = factor(OverallCond),
totalPorchSF = OpenPorchSF + EnclosedPorch + ThreeSnPorch + ScreenPorch,
withbsmtBath = as.numeric(BsmtHalfBath + BsmtFullBath!=0),
isBsmtUnf = as.numeric(TotalBsmtSF == BsmtUnfSF)
)
count(hp, MSSubClass)
count(hp, OverallQual)
OverallCond = factor(OverallCond)
count(hp, OverallCond)
hp_train <- hp[!is.na(SalePrice),]
hp_test <- hp[is.na(SalePrice),]
hp_train <- hp[!is.na(hp$SalePrice),]
hp_test <- hp[is.na(hp$SalePrice),]
set.seed(2123)
model_recipe <- recipe(SalePrice ~ ., data = hp_train) %>%
update_role(Id, new_role = "id var") %>%
step_knnimpute(all_predictors()) %>%
step_dummy(all_predictors(), -all_numeric()) %>%
step_BoxCox(all_predictors()) %>%
step_center(all_predictors())  %>%
step_scale(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_corr(all_predictors(), threshold = .9) %>%
step_log(all_outcomes()) %>%
check_missing(all_predictors())
prepped_recipe <- prep(model_recipe, training = hp_train)
prepped_recipe
train <- bake(prepped_recipe, new_data = hp_train)
test <- bake(prepped_recipe, new_data = hp_test)
anyNA(subset(train, select=-SalePrice))
qqnorm(train$SalePrice)
qqline(train$SalePrice)
